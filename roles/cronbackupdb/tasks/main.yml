---
# tasks file for cronbackupdb

- name: make sure pigz is installed
  package:
    name: pigz
    state: latest

- name: create backup folder with logs and scripts subfolders
  file:
    path: "{{item}}"
    state: directory
  with_items:
    - "{{backup_location}}"
    - "{{backup_location}}/logs"
    - "{{backup_location}}/scripts"
    
- name: create folder for each job within the backup folder
  file:
    path: "{{backup_location}}/{{item.key}}"
    state: directory
  with_dict: "{{ backupdb_cron_jobs }}"

- name: Create backup scripts for each job
  template:
    src: "backupscript.sh.j2"
    dest: "{{backup_location}}/scripts/{{item.key}}-backupscript.sh"
    mode: 0744
  vars:
    backup_archive: "{{item.value.filename}}$(TZ='UTZ' date +'{{item.value.timestamp}}').gz"
    backup_db_location: "{{backup_location}}/{{item.key}}"
    files_to_keep: "{{item.value.files_to_keep}}"
    compression_level: "{{item.value.compression_level | default(6)}}"
    compression_threads: "{{item.value.compression_threads | default(4)}}"
  with_dict: "{{ backupdb_cron_jobs }}"
 
- name: set jobs in cron
  cron:
    job: "sh {{backup_location}}/scripts/{{item.key}}-backupscript.sh >> {{log_file}} 2>&1"
    state: present
    user: root
    backup: yes
    name: "{{item.value.description}}"
    month: "{{item.value.cron.month | default(omit)}}"
    day: "{{item.value.cron.day | default(omit)}}"
    weekday: "{{item.value.cron.weekday | default(omit)}}"
    hour: "{{item.value.cron.hour | default(omit)}}"
    minute: "{{item.value.cron.minute | default(omit)}}"
    special_time: "{{item.value.cron.special_time | default(omit)}}" 
  vars:
    log_file: "{{backup_location}}/logs/{{item.key}}.log"   
    
  with_dict: "{{ backupdb_cron_jobs }}"

- name: Set job in cron to rsync backups to a remote location
  debug:
    msg: work in progress
