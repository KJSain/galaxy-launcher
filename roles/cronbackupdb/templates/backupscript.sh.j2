#!/bin/bash

set -eu -o pipefail

container_postgres_user={{container_postgres_user}}
docker_container_name={{docker_container_name}}
container_database_name={{container_database_name}}
db_export_location={{db_export_location}}
backup_db_file={{backup_db_file}}
docker_export_location={{docker_export_location}}
db_export_location={{db_export_location}}
backup_db_file={{backup_db_file}}
backup_db_location={{backup_db_location}}
timestamp={{cronbackupdb_timestamp}}
zip_command={{zip_command}}
max_number_of_files={{max_number_of_files}}
timestamp()={
{{cronbackupdb_log_timestamp}}
}

echo -n "$(timestamp) Dump the database from within the container using the postgres user ... "
docker exec -u $container_postgres_user $docker_container_name \
  pg_dump $container_database_name -f /export/$db_export_location/$backup_db_file
echo "done"

echo -n "$(timestamp) Move the dumped database to $backup_db_location"
mv $docker_export_location/$db_export_location/$backup_db_file \
  $backup_db_location\$backup_db_file

echo -n "$(timestamp) Archive the database to $backup_location/$backup_archive ... "
$zip_command < $backup_db_location/$backup_db_file > \
echo "done"

  $backup_db_location/$backup_archive
rm -f "$backup_db_location/$backup_db_file"

old_files=$(ls -tp | grep -v '/$' | tail -n + $(($max_number_of_files + 1)) )
echo "$(timestamp) Start removing old files"
for file in old_files
  echo -n "$(timestamp) Removing $file ... "
  rm -f $file
  echo "done"
