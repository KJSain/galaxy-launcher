---
# Copyright 2017 Sequencing Analysis Support Core - Leiden University Medical Center
# Contact us at: sasc@lumc.nl
#
# This file is part of galaxy-docker-ansible.
# A dual licensing mode is applied.
# The source code within this project is freely available for non-commercial use under the GNU Affero General Public license.
# For commercial users or users who do not want to follow the AGPL, please contact us to obtain a separate license.
#
# You should have received a copy of the GNU Affero General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.

- name: Install rsync
  package:
    name: rsync
    state: latest

- name: register dump_file
  set_fact:
    imported_db: "{{dump_file_list.files[0].path | basename }}"

- name: show database name
  debug:
    var: imported_db
    verbosity: 1

- name: Make sure the export location is present
  file:
    path: "{{docker_export_location}}"
    state: directory

- name: Make sure the docker container is started
  docker_container:
    name: "{{docker_container_name}}"
    volumes: "{{docker_export_location}}:/export/"
    image: "{{docker_image}}"
    state: started
    command: /usr/bin/startup

- name: Check if postgres is online
  command: "docker exec {{docker_container_name}} service postgresql status"
  register: result
  until: '"online" in result.stdout'
  retries: 20

- name: Create folder to import database into
  file:
    path: "{{docker_export_location}}/{{import_db_location}}"
    state: directory
    mode: 0700
    owner: "{{galaxy_uid}}"
    group: "{{galaxy_uid}}" 

- name: copy database files using rsync
  synchronize:
    mode: push
    dest: "{{docker_export_location}}/{{import_db_location}}/{{imported_db}}"
    src: "{{import_db}}/{{imported_db}}"
    perms: yes
    compress: yes
  vars:
    ansible_ssh_pipelining: False #otherwise synchronize does not work

- name: Set file ownership
  file:
    path: "{{docker_export_location}}/{{import_db_location}}/{{imported_db}}"
    mode: 0600
    owner: "{{galaxy_uid}}"
    group: "{{galaxy_uid}}"
    state: file 
  register: debug_copy

- name: stop galaxy service in container
  command: "docker exec {{name}} {{command}}"
  vars:
    name: "{{docker_container_name}}"
    command: "supervisorctl stop galaxy:*"

- name: Create script to delete old database and create new empty database
  template:
    src: new_empty_db.j2
    dest: "{{docker_export_location}}/new_empty_db"
    mode: 0600
    owner: "{{container_postgres_user}}"
    group: "{{container_postgres_user}}" 

- name: Delete old database and create new_empty one
  command: "docker exec -u {{user}} {{name}} {{command}}"
  vars:
    name: "{{docker_container_name}}"
    command: "psql -f /export/new_empty_db"
    user: "{{container_postgres_user}}"
  register: database_created  

- name: Database deletion and creation results
  debug:
    var: database_created.stdout
 
- name: Import new database in galaxy container
  command: "docker exec -u {{user}} {{name}} {{command}}"
  vars:
    name: "{{docker_container_name}}"
    command: "psql -d {{container_database_name}} -f /export/{{import_db_location}}/{{imported_db}}"
    user: "{{galaxy_uid}}"
 
- name: Delete temporary files
  file:
    path: "{{item}}"
    state: absent
  with_items:
    - "{{docker_export_location}}/{{import_db_location}}"
    - "{{docker_export_location}}/new_empty_db"

- name: stop container
  docker_container:
    name: "{{docker_container_name}}"
    state: stopped

- name: Make sure to upgrade the database
  set_fact:
    upgrade: True

- name: MSG make sure to upgrade the database
  debug:
    msg: Make sure to upgrade the database before running the container
